openapi: 3.1.0
info:
  title: Stock
  version: '1.0'
  contact:
    name: Christian Langmann
    email: c_langmann@gmx.de
  summary: API managing the stock in a library
  description: 'A library can have different items on stock (books, CDs, DVDs, magazines, ...). Each of those can be available with a different number of items.'
servers:
  - url: 'http://localhost:8080/stock'
    description: stock
paths:
  /items:
    post:
      summary: Create New Item in stock
      operationId: post-user
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    itemId: ''
                properties:
                  '':
                    type: string
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties: {}
            text/html:
              schema:
                type: object
                properties: {}
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema: {}
            examples: {}
        description: Post the necessary fields for the API to create a new item
      description: Create a new user.
      tags:
        - create
        - item
    parameters: []
  '/items/{itemId}':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
        description: the id of the item
    get:
      summary: Get Item Info by Item ID
      tags: []
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
  '/items/{itemId}/stock':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
    get:
      summary: Get items on stock
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../Uuid.yaml
      operationId: get-items-itemId-stock
      description: Get all elements of the item on stock
    post:
      summary: Add item to stock
      operationId: post-items-itemId-stock
      responses:
        '201':
          description: Items added to stock
      description: Add one or more items to stock
      parameters:
        - schema:
            type: integer
            default: 1
          in: query
          name: count
          description: number of items to add to stock
      tags:
        - add
        - item
        - stock
    delete:
      summary: ''
      operationId: delete-items-itemId-stock
      responses:
        '200':
          description: OK
        '409':
          description: Conflict because available items are less than items to be removed
      description: Remove elements of that item from stock
      tags:
        - item
        - remove
        - stock
components:
  schemas:
    Item:
      title: Item
      type: object
      properties:
        itemId:
          $ref: ../Uuid.yaml
        externalRef:
          type: string
        name:
          type: string
        itemType:
          $ref: ../ItemType.yaml
        stock:
          type: integer
        available:
          type: integer
tags:
  - name: add
  - name: create
  - name: item
  - name: remove
  - name: stock
